
AVRASM ver. 2.1.30  D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm Mon Jan 27 08:20:34 2025

D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\Github\Calculator-EEPROM\Atmega\Debug\List\calculator.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _pressedKey=R5
                 	.DEF _operand=R4
                 	.DEF _num1=R6
                 	.DEF _num1_msb=R7
                 	.DEF _num2=R8
                 	.DEF _num2_msb=R9
                 	.DEF _result=R10
                 	.DEF _result_msb=R11
                 	.DEF _state=R12
                 	.DEF _state_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0074 	JMP  __RESET
000002 940c 00d8 	JMP  _my_int
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
000038 fdfe
000039 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
00003a 3837
00003b 2f39
00003c 3534
00003d 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
00003e 3231
00003f 2d33
000040 3043
000041 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 _0x0:
000042 202a
000043 203d
000044 656e
000045 7478      	.DB  0x2A,0x20,0x3D,0x20,0x6E,0x65,0x78,0x74
000046 7020
000047 6761
000048 0065
000049 6f4e      	.DB  0x20,0x70,0x61,0x67,0x65,0x0,0x4E,0x6F
00004a 6820
00004b 7369
00004c 6f74
00004d 7972      	.DB  0x20,0x68,0x69,0x73,0x74,0x6F,0x72,0x79
00004e 2500
00004f 0064
000050 6325
000051 4c00      	.DB  0x0,0x25,0x64,0x0,0x25,0x63,0x0,0x4C
000052 7465
000053 7327
000054 6320
000055 6c61      	.DB  0x65,0x74,0x27,0x73,0x20,0x63,0x61,0x6C
000056 7563
000057 616c
000058 6574
000059 0021      	.DB  0x63,0x75,0x6C,0x61,0x74,0x65,0x21,0x0
                 _0x2000003:
00005a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005b 000a      	.DW  0x0A
00005c 0004      	.DW  0x04
00005d 0066      	.DW  __REG_VARS*2
                 
00005e 0004      	.DW  0x04
00005f 0298      	.DW  _scan
000060 0070      	.DW  _0x3*2
                 
000061 0010      	.DW  0x10
000062 02b0      	.DW  _arrkey
000063 0074      	.DW  _0x4*2
                 
000064 000e      	.DW  0x0E
000065 0260      	.DW  _0x11
000066 0084      	.DW  _0x0*2
                 
000067 000b      	.DW  0x0B
000068 026e      	.DW  _0x11+14
000069 0092      	.DW  _0x0*2+14
                 
00006a 000e      	.DW  0x0E
00006b 0279      	.DW  _0x11+25
00006c 0084      	.DW  _0x0*2
                 
00006d 0011      	.DW  0x11
00006e 0287      	.DW  _0x28
00006f 00a3      	.DW  _0x0*2+31
                 
000070 0002      	.DW  0x02
000071 02c0      	.DW  __base_y_G100
000072 00b4      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000073 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000074 94f8      	CLI
000075 27ee      	CLR  R30
000076 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000077 e0f1      	LDI  R31,1
000078 bffb      	OUT  GICR,R31
000079 bfeb      	OUT  GICR,R30
00007a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007b e08d      	LDI  R24,(14-2)+1
00007c e0a2      	LDI  R26,2
00007d 27bb      	CLR  R27
                 __CLEAR_REG:
00007e 93ed      	ST   X+,R30
00007f 958a      	DEC  R24
000080 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000081 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000082 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000083 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000084 93ed      	ST   X+,R30
000085 9701      	SBIW R24,1
000086 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000087 ebe6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000088 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000089 9185      	LPM  R24,Z+
00008a 9195      	LPM  R25,Z+
00008b 9700      	SBIW R24,0
00008c f061      	BREQ __GLOBAL_INI_END
00008d 91a5      	LPM  R26,Z+
00008e 91b5      	LPM  R27,Z+
00008f 9005      	LPM  R0,Z+
000090 9015      	LPM  R1,Z+
000091 01bf      	MOVW R22,R30
000092 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000093 9005      	LPM  R0,Z+
000094 920d      	ST   X+,R0
000095 9701      	SBIW R24,1
000096 f7e1      	BRNE __GLOBAL_INI_LOOP
000097 01fb      	MOVW R30,R22
000098 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000099 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009a bfed      	OUT  SPL,R30
00009b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009f 940c 026b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * calculator.c
                 ; *
                 ; * Created: 1/27/2025 3:31:19 AM
                 ; * Author: omidt
                 ; */
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <eeprom.h>
                 ;
                 ;unsigned char scan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char Buf[16];
                 ;char pressedKey = 0, operand = '';
                 ;int num1 = 0, num2 = 0, result = 0, state = 0;
                 ;int shown = 0;
                 ;int showHistoryState = 0;
                 ;
                 ;char arrkey[16] = {
                 ;    '7', '8', '9', '/',
                 ;    '4', '5', '6', '*',
                 ;    '1', '2', '3', '-',
                 ;    'C', '0', '=', '+'
                 ;};
                 ;#define c1 PINB.4
                 ;#define c2 PINB.5
                 ;#define c3 PINB.6
                 ;#define c4 PINB.7
                 ;#define keypad_port PORTB
                 ;
                 ;void keypad()
                 ; 0000 0022 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0023     unsigned char r,c;
                 ; 0000 0024     delay_us(10);
0000a1 931a      	ST   -Y,R17
0000a2 930a      	ST   -Y,R16
                 ;	r -> R17
                 ;	c -> R16
                +
0000a3 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000a4 958a     +DEC R24
0000a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0025     for (r=0; r<4; r++){
0000a6 e010      	LDI  R17,LOW(0)
                 _0x6:
0000a7 3014      	CPI  R17,4
0000a8 f560      	BRSH _0x7
                 ; 0000 0026             c=255;
0000a9 ef0f      	LDI  R16,LOW(255)
                 ; 0000 0027             keypad_port=scan[r];
0000aa 2fe1      	MOV  R30,R17
0000ab e0f0      	LDI  R31,0
0000ac 56e8      	SUBI R30,LOW(-_scan)
0000ad 4ffd      	SBCI R31,HIGH(-_scan)
0000ae 81e0      	LD   R30,Z
0000af bbe8      	OUT  0x18,R30
                 ; 0000 0028             delay_us(10);
                +
0000b0 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000b1 958a     +DEC R24
0000b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0029             if(c1==0) pressedKey=arrkey[(r*4)+0];
0000b3 99b4      	SBIC 0x16,4
0000b4 c006      	RJMP _0x8
0000b5 e0e4      	LDI  R30,LOW(4)
0000b6 9fe1      	MUL  R30,R17
0000b7 01f0      	MOVW R30,R0
                +
0000b8 55e0     +SUBI R30 , LOW ( - _arrkey - ( 0 ) )
0000b9 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 0 ) )
                 	__ADDW1MN _arrkey,0
0000ba 8050      	LD   R5,Z
                 ; 0000 002A             if(c2==0) pressedKey=arrkey[(r*4)+1];
                 _0x8:
0000bb 99b5      	SBIC 0x16,5
0000bc c006      	RJMP _0x9
0000bd e0e4      	LDI  R30,LOW(4)
0000be 9fe1      	MUL  R30,R17
0000bf 01f0      	MOVW R30,R0
                +
0000c0 54ef     +SUBI R30 , LOW ( - _arrkey - ( 1 ) )
0000c1 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 1 ) )
                 	__ADDW1MN _arrkey,1
0000c2 8050      	LD   R5,Z
                 ; 0000 002B             if(c3==0) pressedKey=arrkey[(r*4)+2];
                 _0x9:
0000c3 99b6      	SBIC 0x16,6
0000c4 c006      	RJMP _0xA
0000c5 e0e4      	LDI  R30,LOW(4)
0000c6 9fe1      	MUL  R30,R17
0000c7 01f0      	MOVW R30,R0
                +
0000c8 54ee     +SUBI R30 , LOW ( - _arrkey - ( 2 ) )
0000c9 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 2 ) )
                 	__ADDW1MN _arrkey,2
0000ca 8050      	LD   R5,Z
                 ; 0000 002C             if(c4==0) pressedKey=arrkey[(r*4)+3];
                 _0xA:
0000cb 99b7      	SBIC 0x16,7
0000cc c006      	RJMP _0xB
0000cd e0e4      	LDI  R30,LOW(4)
0000ce 9fe1      	MUL  R30,R17
0000cf 01f0      	MOVW R30,R0
                +
0000d0 54ed     +SUBI R30 , LOW ( - _arrkey - ( 3 ) )
0000d1 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 3 ) )
                 	__ADDW1MN _arrkey,3
0000d2 8050      	LD   R5,Z
                 ; 0000 002D     }
                 _0xB:
0000d3 5f1f      	SUBI R17,-1
0000d4 cfd2      	RJMP _0x6
                 _0x7:
                 ; 0000 002E }
0000d5 9109      	LD   R16,Y+
0000d6 9119      	LD   R17,Y+
0000d7 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [2] void my_int()
                 ; 0000 0031 {
                 _my_int:
                 ; .FSTART _my_int
0000d8 920a      	ST   -Y,R0
0000d9 921a      	ST   -Y,R1
0000da 92fa      	ST   -Y,R15
0000db 936a      	ST   -Y,R22
0000dc 937a      	ST   -Y,R23
0000dd 938a      	ST   -Y,R24
0000de 939a      	ST   -Y,R25
0000df 93aa      	ST   -Y,R26
0000e0 93ba      	ST   -Y,R27
0000e1 93ea      	ST   -Y,R30
0000e2 93fa      	ST   -Y,R31
0000e3 b7ef      	IN   R30,SREG
0000e4 93ea      	ST   -Y,R30
                 ; 0000 0032     #asm("cli")
0000e5 94f8      	cli
                 ; 0000 0033     keypad();
0000e6 dfba      	RCALL _keypad
                 ; 0000 0034     DDRB=0X0F;
0000e7 e0ef      	LDI  R30,LOW(15)
0000e8 bbe7      	OUT  0x17,R30
                 ; 0000 0035     keypad_port=0XF0;
0000e9 efe0      	LDI  R30,LOW(240)
0000ea bbe8      	OUT  0x18,R30
                 ; 0000 0036     if(pressedKey != 0)
0000eb 2055      	TST  R5
0000ec f409      	BRNE PC+2
0000ed c16e      	RJMP _0xC
                 ; 0000 0037     {
                 ; 0000 0038         if (pressedKey == 'C') {num1 = 0; num2 = 0; result = 0; lcd_clear(); showHistoryState = 0; num1 = 0; num2 = 0; s ...
0000ee e4e3      	LDI  R30,LOW(67)
0000ef 15e5      	CP   R30,R5
0000f0 f4a1      	BRNE _0xD
0000f1 2466      	CLR  R6
0000f2 2477      	CLR  R7
0000f3 2488      	CLR  R8
0000f4 2499      	CLR  R9
0000f5 24aa      	CLR  R10
0000f6 24bb      	CLR  R11
0000f7 940e 02b4 	CALL _lcd_clear
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa 93e0 02ae 	STS  _showHistoryState,R30
0000fc 93e0 02af 	STS  _showHistoryState+1,R30
0000fe 2466      	CLR  R6
0000ff 2477      	CLR  R7
000100 2488      	CLR  R8
000101 2499      	CLR  R9
000102 24cc      	CLR  R12
000103 24dd      	CLR  R13
                 ; 0000 0039         else if(pressedKey == '/'){
000104 c156      	RJMP _0xE
                 _0xD:
000105 e2ef      	LDI  R30,LOW(47)
000106 15e5      	CP   R30,R5
000107 f4e1      	BRNE _0xF
                 ; 0000 003A             int historyCount = eeprom_read_byte(0);
                 ; 0000 003B             if (historyCount != 0){
000108 940e 04e2 	CALL SUBOPT_0x0
                 ;	historyCount -> Y+0
00010a 9730      	SBIW R30,0
00010b f081      	BREQ _0x10
                 ; 0000 003C                 shown = 0;
00010c e0e0      	LDI  R30,LOW(0)
00010d 93e0 02ac 	STS  _shown,R30
00010f 93e0 02ad 	STS  _shown+1,R30
                 ; 0000 003D                 showHistoryState = 1;
000111 e0e1      	LDI  R30,LOW(1)
000112 e0f0      	LDI  R31,HIGH(1)
000113 93e0 02ae 	STS  _showHistoryState,R30
000115 93f0 02af 	STS  _showHistoryState+1,R31
                 ; 0000 003E                 lcd_clear();
000117 940e 02b4 	CALL _lcd_clear
                 ; 0000 003F                 lcd_puts("* = next page");
                +
000119 e6a0     +LDI R26 , LOW ( _0x11 + ( 0 ) )
00011a e0b2     +LDI R27 , HIGH ( _0x11 + ( 0 ) )
                 	__POINTW2MN _0x11,0
00011b c004      	RJMP _0x2D
                 ; 0000 0040             }
                 ; 0000 0041             else{
                 _0x10:
                 ; 0000 0042                 lcd_clear();
00011c 940e 02b4 	CALL _lcd_clear
                 ; 0000 0043                 lcd_puts("No history");
                +
00011e e6ae     +LDI R26 , LOW ( _0x11 + ( 14 ) )
00011f e0b2     +LDI R27 , HIGH ( _0x11 + ( 14 ) )
                 	__POINTW2MN _0x11,14
                 _0x2D:
000120 940e 02e2 	CALL _lcd_puts
                 ; 0000 0044             }
                 ; 0000 0045         }
000122 9622      	ADIW R28,2
                 ; 0000 0046         else if(pressedKey == '*'){
000123 c137      	RJMP _0x13
                 _0xF:
000124 e2ea      	LDI  R30,LOW(42)
000125 15e5      	CP   R30,R5
000126 f009      	BREQ PC+2
000127 c068      	RJMP _0x14
                 ; 0000 0047             if(showHistoryState == 1){
000128 940e 04eb 	CALL SUBOPT_0x1
00012a 9711      	SBIW R26,1
00012b f009      	BREQ PC+2
00012c c062      	RJMP _0x15
                 ; 0000 0048                 int historyCount = eeprom_read_byte(0);
                 ; 0000 0049                 if(shown < historyCount){
00012d 940e 04e2 	CALL SUBOPT_0x0
                 ;	historyCount -> Y+0
00012f 91a0 02ac 	LDS  R26,_shown
000131 91b0 02ad 	LDS  R27,_shown+1
000133 17ae      	CP   R26,R30
000134 07bf      	CPC  R27,R31
000135 f00c      	BRLT PC+2
000136 c052      	RJMP _0x16
                 ; 0000 004A                     int h_num1 = eeprom_read_byte(shown * 4 + 1);
                 ; 0000 004B                     char h_op = eeprom_read_byte(shown * 4 + 2);
                 ; 0000 004C                     int h_num2 = eeprom_read_byte(shown * 4 + 3);
                 ; 0000 004D                     int h_res = eeprom_read_byte(shown * 4 + 4);
                 ; 0000 004E                     shown += 1;
000137 9727      	SBIW R28,7
                 ;	historyCount -> Y+7
                 ;	h_num1 -> Y+5
                 ;	h_op -> Y+4
                 ;	h_num2 -> Y+2
                 ;	h_res -> Y+0
000138 940e 04f0 	CALL SUBOPT_0x2
00013a 9631      	ADIW R30,1
00013b 940e 04f7 	CALL SUBOPT_0x3
00013d 83ed      	STD  Y+5,R30
00013e 83fe      	STD  Y+5+1,R31
00013f 940e 04f0 	CALL SUBOPT_0x2
000141 9632      	ADIW R30,2
000142 01df      	MOVW R26,R30
000143 940e 05db 	CALL __EEPROMRDB
000145 83ec      	STD  Y+4,R30
000146 940e 04f0 	CALL SUBOPT_0x2
000148 9633      	ADIW R30,3
000149 940e 04f7 	CALL SUBOPT_0x3
00014b 83ea      	STD  Y+2,R30
00014c 83fb      	STD  Y+2+1,R31
00014d 940e 04f0 	CALL SUBOPT_0x2
00014f 9634      	ADIW R30,4
000150 940e 04f7 	CALL SUBOPT_0x3
000152 83e8      	ST   Y,R30
000153 83f9      	STD  Y+1,R31
000154 91e0 02ac 	LDS  R30,_shown
000156 91f0 02ad 	LDS  R31,_shown+1
000158 9631      	ADIW R30,1
000159 93e0 02ac 	STS  _shown,R30
00015b 93f0 02ad 	STS  _shown+1,R31
                 ; 0000 004F                     lcd_clear();
00015d 940e 02b4 	CALL _lcd_clear
                 ; 0000 0050                     sprintf(Buf,"%d",h_num1); lcd_puts(Buf);
00015f 940e 04fc 	CALL SUBOPT_0x4
000161 940e 0501 	CALL SUBOPT_0x5
000163 85e9      	LDD  R30,Y+9
000164 85fa      	LDD  R31,Y+9+1
000165 940e 0506 	CALL SUBOPT_0x6
                 ; 0000 0051                     sprintf(Buf,"%c",h_op); lcd_puts(Buf);
                +
000167 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
000168 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
000169 93fa      	ST   -Y,R31
00016a 93ea      	ST   -Y,R30
00016b 85e8      	LDD  R30,Y+8
00016c 27ff      	CLR  R31
00016d 2766      	CLR  R22
00016e 2777      	CLR  R23
00016f 940e 0513 	CALL SUBOPT_0x7
                 ; 0000 0052                     sprintf(Buf,"%d",h_num2); lcd_puts(Buf);
000171 940e 0501 	CALL SUBOPT_0x5
000173 81ee      	LDD  R30,Y+6
000174 81ff      	LDD  R31,Y+6+1
000175 940e 0506 	CALL SUBOPT_0x6
                 ; 0000 0053                     sprintf(Buf,"%c",'='); lcd_puts(Buf);
                +
000177 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 28 ) )
000178 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW1FN _0x0,28
000179 93fa      	ST   -Y,R31
00017a 93ea      	ST   -Y,R30
                +
00017b e3ed     +LDI R30 , LOW ( 0x3D )
00017c e0f0     +LDI R31 , HIGH ( 0x3D )
00017d e060     +LDI R22 , BYTE3 ( 0x3D )
00017e e070     +LDI R23 , BYTE4 ( 0x3D )
                 	__GETD1N 0x3D
00017f 940e 0513 	CALL SUBOPT_0x7
                 ; 0000 0054                     sprintf(Buf,"%d",h_res); lcd_puts(Buf);
000181 940e 0501 	CALL SUBOPT_0x5
000183 81ec      	LDD  R30,Y+4
000184 81fd      	LDD  R31,Y+4+1
000185 940e 051e 	CALL SUBOPT_0x8
                 ; 0000 0055                 }
000187 9627      	ADIW R28,7
                 ; 0000 0056                 else { shown = 0; }
000188 c005      	RJMP _0x17
                 _0x16:
000189 e0e0      	LDI  R30,LOW(0)
00018a 93e0 02ac 	STS  _shown,R30
00018c 93e0 02ad 	STS  _shown+1,R30
                 _0x17:
                 ; 0000 0057             }
00018e 9622      	ADIW R28,2
                 ; 0000 0058 
                 ; 0000 0059         }
                 _0x15:
                 ; 0000 005A         else if((pressedKey == '+' | pressedKey == '-') & showHistoryState == 0) { operand = pressedKey; state = 1; lcd_ ...
00018f c0cb      	RJMP _0x18
                 _0x14:
000190 2da5      	MOV  R26,R5
000191 e2eb      	LDI  R30,LOW(43)
000192 940e 05a8 	CALL __EQB12
000194 2e0e      	MOV  R0,R30
000195 e2ed      	LDI  R30,LOW(45)
000196 940e 05a8 	CALL __EQB12
000198 2a0e      	OR   R0,R30
000199 940e 052a 	CALL SUBOPT_0x9
00019b f029      	BREQ _0x19
00019c 2c45      	MOV  R4,R5
00019d e0e1      	LDI  R30,LOW(1)
00019e e0f0      	LDI  R31,HIGH(1)
00019f 016f      	MOVW R12,R30
0001a0 c0b8      	RJMP _0x2E
                 ; 0000 005B 
                 ; 0000 005C         else if(pressedKey == '=' & showHistoryState == 0) {
                 _0x19:
0001a1 2da5      	MOV  R26,R5
0001a2 e3ed      	LDI  R30,LOW(61)
0001a3 940e 05a8 	CALL __EQB12
0001a5 2e0e      	MOV  R0,R30
0001a6 940e 052a 	CALL SUBOPT_0x9
0001a8 f409      	BRNE PC+2
0001a9 c09a      	RJMP _0x1B
                 ; 0000 005D             int historyCount = eeprom_read_byte(0);
                 ; 0000 005E             if(historyCount == 10){
0001aa 9722      	SBIW R28,2
                 ;	historyCount -> Y+0
0001ab e0a0      	LDI  R26,LOW(0)
0001ac e0b0      	LDI  R27,HIGH(0)
0001ad 940e 05db 	CALL __EEPROMRDB
0001af e0f0      	LDI  R31,0
0001b0 83e8      	ST   Y,R30
0001b1 83f9      	STD  Y+1,R31
0001b2 81a8      	LD   R26,Y
0001b3 81b9      	LDD  R27,Y+1
0001b4 971a      	SBIW R26,10
0001b5 f009      	BREQ PC+2
0001b6 c056      	RJMP _0x1C
                 ; 0000 005F                 int j;
                 ; 0000 0060                 for(j = 0; j < 9; j++){
0001b7 9722      	SBIW R28,2
                 ;	historyCount -> Y+2
                 ;	j -> Y+0
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 83e8      	STD  Y+0,R30
0001ba 83e9      	STD  Y+0+1,R30
                 _0x1E:
0001bb 81a8      	LD   R26,Y
0001bc 81b9      	LDD  R27,Y+1
0001bd 9719      	SBIW R26,9
0001be f00c      	BRLT PC+2
0001bf c042      	RJMP _0x1F
                 ; 0000 0061                     int oh_num1 = eeprom_read_byte((j+1)*4+1);
                 ; 0000 0062                     int oh_opr1 = eeprom_read_byte((j+1)*4+2);
                 ; 0000 0063                     int oh_num2 = eeprom_read_byte((j+1)*4+3);
                 ; 0000 0064                     int oh_res1 = eeprom_read_byte((j+1)*4+4);
                 ; 0000 0065                     delay_ms(10);
0001c0 9728      	SBIW R28,8
                 ;	historyCount -> Y+10
                 ;	j -> Y+8
                 ;	oh_num1 -> Y+6
                 ;	oh_opr1 -> Y+4
                 ;	oh_num2 -> Y+2
                 ;	oh_res1 -> Y+0
0001c1 940e 0531 	CALL SUBOPT_0xA
0001c3 9631      	ADIW R30,1
0001c4 940e 04f7 	CALL SUBOPT_0x3
0001c6 83ee      	STD  Y+6,R30
0001c7 83ff      	STD  Y+6+1,R31
0001c8 940e 0531 	CALL SUBOPT_0xA
0001ca 9632      	ADIW R30,2
0001cb 940e 04f7 	CALL SUBOPT_0x3
0001cd 83ec      	STD  Y+4,R30
0001ce 83fd      	STD  Y+4+1,R31
0001cf 940e 0531 	CALL SUBOPT_0xA
0001d1 9633      	ADIW R30,3
0001d2 940e 04f7 	CALL SUBOPT_0x3
0001d4 83ea      	STD  Y+2,R30
0001d5 83fb      	STD  Y+2+1,R31
0001d6 940e 0531 	CALL SUBOPT_0xA
0001d8 9634      	ADIW R30,4
0001d9 940e 04f7 	CALL SUBOPT_0x3
0001db 83e8      	ST   Y,R30
0001dc 83f9      	STD  Y+1,R31
0001dd e0aa      	LDI  R26,LOW(10)
0001de e0b0      	LDI  R27,0
0001df 940e 058c 	CALL _delay_ms
                 ; 0000 0066                     eeprom_write_byte(j*4+1,oh_num1);
0001e1 940e 0539 	CALL SUBOPT_0xB
0001e3 9631      	ADIW R30,1
0001e4 01df      	MOVW R26,R30
0001e5 81ee      	LDD  R30,Y+6
0001e6 940e 053e 	CALL SUBOPT_0xC
                 ; 0000 0067                     eeprom_write_byte(j*4+2,oh_opr1);
0001e8 9632      	ADIW R30,2
0001e9 01df      	MOVW R26,R30
0001ea 81ec      	LDD  R30,Y+4
0001eb 940e 053e 	CALL SUBOPT_0xC
                 ; 0000 0068                     eeprom_write_byte(j*4+3,oh_num2);
0001ed 9633      	ADIW R30,3
0001ee 01df      	MOVW R26,R30
0001ef 81ea      	LDD  R30,Y+2
0001f0 940e 053e 	CALL SUBOPT_0xC
                 ; 0000 0069                     eeprom_write_byte(j*4+4,oh_res1);
0001f2 9634      	ADIW R30,4
0001f3 01df      	MOVW R26,R30
0001f4 81e8      	LD   R30,Y
0001f5 940e 05e7 	CALL __EEPROMWRB
                 ; 0000 006A                     delay_ms(10);
0001f7 e0aa      	LDI  R26,LOW(10)
0001f8 e0b0      	LDI  R27,0
0001f9 940e 058c 	CALL _delay_ms
                 ; 0000 006B                 }
0001fb 9628      	ADIW R28,8
0001fc 81e8      	LD   R30,Y
0001fd 81f9      	LDD  R31,Y+1
0001fe 9631      	ADIW R30,1
0001ff 83e8      	ST   Y,R30
000200 83f9      	STD  Y+1,R31
000201 cfb9      	RJMP _0x1E
                 _0x1F:
                 ; 0000 006C                 eeprom_write_byte(0,9);
000202 e0a0      	LDI  R26,LOW(0)
000203 e0b0      	LDI  R27,HIGH(0)
000204 e0e9      	LDI  R30,LOW(9)
000205 940e 05e7 	CALL __EEPROMWRB
                 ; 0000 006D                 historyCount -= 1;
000207 81ea      	LDD  R30,Y+2
000208 81fb      	LDD  R31,Y+2+1
000209 9731      	SBIW R30,1
00020a 83ea      	STD  Y+2,R30
00020b 83fb      	STD  Y+2+1,R31
                 ; 0000 006E             }
00020c 9622      	ADIW R28,2
                 ; 0000 006F             state = 0;
                 _0x1C:
00020d 24cc      	CLR  R12
00020e 24dd      	CLR  R13
                 ; 0000 0070             lcd_putchar(pressedKey);
00020f 2da5      	MOV  R26,R5
000210 d0b1      	RCALL _lcd_putchar
                 ; 0000 0071             if(operand == '+') { result = num1 + num2; }
000211 e2eb      	LDI  R30,LOW(43)
000212 15e4      	CP   R30,R4
000213 f421      	BRNE _0x20
000214 01f4      	MOVW R30,R8
000215 0de6      	ADD  R30,R6
000216 1df7      	ADC  R31,R7
000217 c006      	RJMP _0x2F
                 ; 0000 0072             else if(operand == '-') { result = num1 - num2; }
                 _0x20:
000218 e2ed      	LDI  R30,LOW(45)
000219 15e4      	CP   R30,R4
00021a f421      	BRNE _0x22
00021b 01f3      	MOVW R30,R6
00021c 19e8      	SUB  R30,R8
00021d 09f9      	SBC  R31,R9
                 _0x2F:
00021e 015f      	MOVW R10,R30
                 ; 0000 0073             sprintf(Buf,"%d",result); lcd_puts(Buf);
                 _0x22:
00021f 940e 04fc 	CALL SUBOPT_0x4
000221 940e 0501 	CALL SUBOPT_0x5
000223 01f5      	MOVW R30,R10
000224 940e 051e 	CALL SUBOPT_0x8
                 ; 0000 0074 
                 ; 0000 0075             eeprom_write_byte(historyCount * 4 + 1, num1);
000226 940e 0541 	CALL SUBOPT_0xD
000228 9631      	ADIW R30,1
000229 01df      	MOVW R26,R30
00022a 2de6      	MOV  R30,R6
00022b 940e 0546 	CALL SUBOPT_0xE
                 ; 0000 0076             eeprom_write_byte(historyCount * 4 + 2, operand);
00022d 9632      	ADIW R30,2
00022e 01df      	MOVW R26,R30
00022f 2de4      	MOV  R30,R4
000230 940e 0546 	CALL SUBOPT_0xE
                 ; 0000 0077             eeprom_write_byte(historyCount * 4 + 3, num2);
000232 9633      	ADIW R30,3
000233 01df      	MOVW R26,R30
000234 2de8      	MOV  R30,R8
000235 940e 0546 	CALL SUBOPT_0xE
                 ; 0000 0078             eeprom_write_byte(historyCount * 4 + 4, result);
000237 9634      	ADIW R30,4
000238 01df      	MOVW R26,R30
000239 2dea      	MOV  R30,R10
00023a 940e 05e7 	CALL __EEPROMWRB
                 ; 0000 0079             eeprom_write_byte(0, (historyCount + 1));
00023c 81e8      	LD   R30,Y
00023d 5fef      	SUBI R30,-LOW(1)
00023e e0a0      	LDI  R26,LOW(0)
00023f e0b0      	LDI  R27,HIGH(0)
000240 940e 05e7 	CALL __EEPROMWRB
                 ; 0000 007A 
                 ; 0000 007B         }
000242 9622      	ADIW R28,2
                 ; 0000 007C         else if(showHistoryState == 1){
000243 c017      	RJMP _0x23
                 _0x1B:
000244 940e 04eb 	CALL SUBOPT_0x1
000246 9711      	SBIW R26,1
000247 f429      	BRNE _0x24
                 ; 0000 007D             lcd_clear();
000248 d06b      	RCALL _lcd_clear
                 ; 0000 007E             lcd_puts("* = next page");
                +
000249 e7a9     +LDI R26 , LOW ( _0x11 + ( 25 ) )
00024a e0b2     +LDI R27 , HIGH ( _0x11 + ( 25 ) )
                 	__POINTW2MN _0x11,25
00024b d096      	RCALL _lcd_puts
                 ; 0000 007F         }
                 ; 0000 0080         else{
00024c c00e      	RJMP _0x25
                 _0x24:
                 ; 0000 0081             if(state == 0){ num1 = num1 * 10 + pressedKey - 48; }
00024d 2c0c      	MOV  R0,R12
00024e 280d      	OR   R0,R13
00024f f429      	BRNE _0x26
000250 01f3      	MOVW R30,R6
000251 940e 0549 	CALL SUBOPT_0xF
000253 013d      	MOVW R6,R26
                 ; 0000 0082             else{ num2 = num2 * 10 + pressedKey - 48; }
000254 c004      	RJMP _0x27
                 _0x26:
000255 01f4      	MOVW R30,R8
000256 940e 0549 	CALL SUBOPT_0xF
000258 014d      	MOVW R8,R26
                 _0x27:
                 ; 0000 0083             lcd_putchar(pressedKey);
                 _0x2E:
000259 2da5      	MOV  R26,R5
00025a d067      	RCALL _lcd_putchar
                 ; 0000 0084         }
                 _0x25:
                 _0x23:
                 _0x18:
                 _0x13:
                 _0xE:
                 ; 0000 0085         pressedKey = 0;
00025b 2455      	CLR  R5
                 ; 0000 0086     }
                 ; 0000 0087 
                 ; 0000 0088     #asm ("sei")
                 _0xC:
00025c 9478      	sei
                 ; 0000 0089 }
00025d 91e9      	LD   R30,Y+
00025e bfef      	OUT  SREG,R30
00025f 91f9      	LD   R31,Y+
000260 91e9      	LD   R30,Y+
000261 91b9      	LD   R27,Y+
000262 91a9      	LD   R26,Y+
000263 9199      	LD   R25,Y+
000264 9189      	LD   R24,Y+
000265 9179      	LD   R23,Y+
000266 9169      	LD   R22,Y+
000267 90f9      	LD   R15,Y+
000268 9019      	LD   R1,Y+
000269 9009      	LD   R0,Y+
00026a 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x11:
000260           	.BYTE 0x27
                 ;
                 ;void main(void)
                 ; 0000 008C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 008D     //eeprom_write_byte(0, 0);
                 ; 0000 008E     lcd_init(16);
00026b e1a0      	LDI  R26,LOW(16)
00026c d086      	RCALL _lcd_init
                 ; 0000 008F     lcd_clear();
00026d d046      	RCALL _lcd_clear
                 ; 0000 0090     lcd_puts("Let's calculate!");
                +
00026e e8a7     +LDI R26 , LOW ( _0x28 + ( 0 ) )
00026f e0b2     +LDI R27 , HIGH ( _0x28 + ( 0 ) )
                 	__POINTW2MN _0x28,0
000270 d071      	RCALL _lcd_puts
                 ; 0000 0091     delay_ms(1000);
000271 eea8      	LDI  R26,LOW(1000)
000272 e0b3      	LDI  R27,HIGH(1000)
000273 940e 058c 	CALL _delay_ms
                 ; 0000 0092     lcd_clear();
000275 d03e      	RCALL _lcd_clear
                 ; 0000 0093 
                 ; 0000 0094     #asm("sei")
000276 9478      	sei
                 ; 0000 0095     GICR |= (1 << INT0);
000277 b7eb      	IN   R30,0x3B
000278 64e0      	ORI  R30,0x40
000279 bfeb      	OUT  0x3B,R30
                 ; 0000 0096     MCUCR |= (1 << ISC01) | (0 << ISC00);
00027a b7e5      	IN   R30,0x35
00027b 60e2      	ORI  R30,2
00027c bfe5      	OUT  0x35,R30
                 ; 0000 0097     DDRB=0X0F;
00027d e0ef      	LDI  R30,LOW(15)
00027e bbe7      	OUT  0x17,R30
                 ; 0000 0098     keypad_port=0XF0;
00027f efe0      	LDI  R30,LOW(240)
000280 bbe8      	OUT  0x18,R30
                 ; 0000 0099     while (1) {
                 _0x29:
                 ; 0000 009A 
                 ; 0000 009B     }
000281 cfff      	RJMP _0x29
                 ; 0000 009C }
                 _0x2C:
000282 cfff      	RJMP _0x2C
                 ; .FEND
                 
                 	.DSEG
                 _0x28:
000287           	.BYTE 0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000283 93aa      	ST   -Y,R26
000284 b3eb      	IN   R30,0x1B
000285 70ef      	ANDI R30,LOW(0xF)
000286 2fae      	MOV  R26,R30
000287 81e8      	LD   R30,Y
000288 7fe0      	ANDI R30,LOW(0xF0)
000289 2bea      	OR   R30,R26
00028a bbeb      	OUT  0x1B,R30
                +
00028b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028c 958a     +DEC R24
00028d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028e 9ada      	SBI  0x1B,2
                +
00028f e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000290 958a     +DEC R24
000291 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000292 98da      	CBI  0x1B,2
                +
000293 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000294 958a     +DEC R24
000295 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000296 c088      	RJMP _0x20A0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000297 93aa      	ST   -Y,R26
000298 81a8      	LD   R26,Y
000299 dfe9      	RCALL __lcd_write_nibble_G100
00029a 81e8          ld    r30,y
00029b 95e2          swap  r30
00029c 83e8          st    y,r30
00029d 81a8      	LD   R26,Y
00029e dfe4      	RCALL __lcd_write_nibble_G100
                +
00029f e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002a0 958a     +DEC R24
0002a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002a2 c07c      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a3 93aa      	ST   -Y,R26
0002a4 81e8      	LD   R30,Y
0002a5 e0f0      	LDI  R31,0
0002a6 54e0      	SUBI R30,LOW(-__base_y_G100)
0002a7 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0002a8 81e0      	LD   R30,Z
0002a9 81a9      	LDD  R26,Y+1
0002aa 0fae      	ADD  R26,R30
0002ab dfeb      	RCALL __lcd_write_data
0002ac 81e9      	LDD  R30,Y+1
0002ad 93e0 02c4 	STS  __lcd_x,R30
0002af 81e8      	LD   R30,Y
0002b0 93e0 02c5 	STS  __lcd_y,R30
0002b2 9622      	ADIW R28,2
0002b3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002b4 e0a2      	LDI  R26,LOW(2)
0002b5 940e 0553 	CALL SUBOPT_0x10
0002b7 e0ac      	LDI  R26,LOW(12)
0002b8 dfde      	RCALL __lcd_write_data
0002b9 e0a1      	LDI  R26,LOW(1)
0002ba 940e 0553 	CALL SUBOPT_0x10
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 93e0 02c5 	STS  __lcd_y,R30
0002bf 93e0 02c4 	STS  __lcd_x,R30
0002c1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002c2 93aa      	ST   -Y,R26
0002c3 81a8      	LD   R26,Y
0002c4 30aa      	CPI  R26,LOW(0xA)
0002c5 f031      	BREQ _0x2000005
0002c6 91e0 02c6 	LDS  R30,__lcd_maxx
0002c8 91a0 02c4 	LDS  R26,__lcd_x
0002ca 17ae      	CP   R26,R30
0002cb f060      	BRLO _0x2000004
                 _0x2000005:
0002cc e0e0      	LDI  R30,LOW(0)
0002cd 93ea      	ST   -Y,R30
0002ce 91a0 02c5 	LDS  R26,__lcd_y
0002d0 5faf      	SUBI R26,-LOW(1)
0002d1 93a0 02c5 	STS  __lcd_y,R26
0002d3 dfcf      	RCALL _lcd_gotoxy
0002d4 81a8      	LD   R26,Y
0002d5 30aa      	CPI  R26,LOW(0xA)
0002d6 f409      	BRNE _0x2000007
0002d7 c047      	RJMP _0x20A0002
                 _0x2000007:
                 _0x2000004:
0002d8 91e0 02c4 	LDS  R30,__lcd_x
0002da 5fef      	SUBI R30,-LOW(1)
0002db 93e0 02c4 	STS  __lcd_x,R30
0002dd 9ad8      	SBI  0x1B,0
0002de 81a8      	LD   R26,Y
0002df dfb7      	RCALL __lcd_write_data
0002e0 98d8      	CBI  0x1B,0
0002e1 c03d      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002e2 93ba      	ST   -Y,R27
0002e3 93aa      	ST   -Y,R26
0002e4 931a      	ST   -Y,R17
                 _0x2000008:
0002e5 81a9      	LDD  R26,Y+1
0002e6 81ba      	LDD  R27,Y+1+1
0002e7 91ed      	LD   R30,X+
0002e8 83a9      	STD  Y+1,R26
0002e9 83ba      	STD  Y+1+1,R27
0002ea 2f1e      	MOV  R17,R30
0002eb 30e0      	CPI  R30,0
0002ec f019      	BREQ _0x200000A
0002ed 2fa1      	MOV  R26,R17
0002ee dfd3      	RCALL _lcd_putchar
0002ef cff5      	RJMP _0x2000008
                 _0x200000A:
0002f0 8118      	LDD  R17,Y+0
0002f1 9623      	ADIW R28,3
0002f2 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002f3 93aa      	ST   -Y,R26
0002f4 b3ea      	IN   R30,0x1A
0002f5 6fe0      	ORI  R30,LOW(0xF0)
0002f6 bbea      	OUT  0x1A,R30
0002f7 9ad2      	SBI  0x1A,2
0002f8 9ad0      	SBI  0x1A,0
0002f9 9ad1      	SBI  0x1A,1
0002fa 98da      	CBI  0x1B,2
0002fb 98d8      	CBI  0x1B,0
0002fc 98d9      	CBI  0x1B,1
0002fd 81e8      	LD   R30,Y
0002fe 93e0 02c6 	STS  __lcd_maxx,R30
000300 58e0      	SUBI R30,-LOW(128)
                +
000301 93e0 02c2+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000303 81e8      	LD   R30,Y
000304 54e0      	SUBI R30,-LOW(192)
                +
000305 93e0 02c3+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000307 e1a4      	LDI  R26,LOW(20)
000308 e0b0      	LDI  R27,0
000309 940e 058c 	CALL _delay_ms
00030b 940e 0559 	CALL SUBOPT_0x11
00030d 940e 0559 	CALL SUBOPT_0x11
00030f 940e 0559 	CALL SUBOPT_0x11
000311 e2a0      	LDI  R26,LOW(32)
000312 df70      	RCALL __lcd_write_nibble_G100
                +
000313 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000314 958a     +DEC R24
000315 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000316 e2a8      	LDI  R26,LOW(40)
000317 df7f      	RCALL __lcd_write_data
000318 e0a4      	LDI  R26,LOW(4)
000319 df7d      	RCALL __lcd_write_data
00031a e8a5      	LDI  R26,LOW(133)
00031b df7b      	RCALL __lcd_write_data
00031c e0a6      	LDI  R26,LOW(6)
00031d df79      	RCALL __lcd_write_data
00031e df95      	RCALL _lcd_clear
                 _0x20A0002:
00031f 9621      	ADIW R28,1
000320 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000321 93ba      	ST   -Y,R27
000322 93aa      	ST   -Y,R26
000323 931a      	ST   -Y,R17
000324 930a      	ST   -Y,R16
000325 81aa      	LDD  R26,Y+2
000326 81bb      	LDD  R27,Y+2+1
000327 9612      	ADIW R26,2
000328 940e 05ce 	CALL __GETW1P
00032a 9730      	SBIW R30,0
00032b f159      	BREQ _0x2020010
00032c 81aa      	LDD  R26,Y+2
00032d 81bb      	LDD  R27,Y+2+1
00032e 9614      	ADIW R26,4
00032f 940e 05ce 	CALL __GETW1P
000331 018f      	MOVW R16,R30
000332 9730      	SBIW R30,0
000333 f061      	BREQ _0x2020012
                +
000334 3002     +CPI R16 , LOW ( 2 )
000335 e0e0     +LDI R30 , HIGH ( 2 )
000336 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000337 f098      	BRLO _0x2020013
000338 01f8      	MOVW R30,R16
000339 9731      	SBIW R30,1
00033a 018f      	MOVW R16,R30
                +
00033b 81aa     +LDD R26 , Y + 2
00033c 81bb     +LDD R27 , Y + 2 + 1
00033d 9614     +ADIW R26 , 4
00033e 93ed     +ST X + , R30
00033f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000340 81aa      	LDD  R26,Y+2
000341 81bb      	LDD  R27,Y+2+1
000342 9612      	ADIW R26,2
000343 91ed      	LD   R30,X+
000344 91fd      	LD   R31,X+
000345 9631      	ADIW R30,1
000346 93fe      	ST   -X,R31
000347 93ee      	ST   -X,R30
000348 9731      	SBIW R30,1
000349 81ac      	LDD  R26,Y+4
00034a 83a0      	STD  Z+0,R26
                 _0x2020013:
00034b 81aa      	LDD  R26,Y+2
00034c 81bb      	LDD  R27,Y+2+1
00034d 940e 05ce 	CALL __GETW1P
00034f 23ff      	TST  R31
000350 f02a      	BRMI _0x2020014
000351 91ed      	LD   R30,X+
000352 91fd      	LD   R31,X+
000353 9631      	ADIW R30,1
000354 93fe      	ST   -X,R31
000355 93ee      	ST   -X,R30
                 _0x2020014:
000356 c006      	RJMP _0x2020015
                 _0x2020010:
000357 81aa      	LDD  R26,Y+2
000358 81bb      	LDD  R27,Y+2+1
000359 efef      	LDI  R30,LOW(65535)
00035a efff      	LDI  R31,HIGH(65535)
00035b 93ed      	ST   X+,R30
00035c 93fc      	ST   X,R31
                 _0x2020015:
00035d 8119      	LDD  R17,Y+1
00035e 8108      	LDD  R16,Y+0
00035f 9625      	ADIW R28,5
000360 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000361 93ba      	ST   -Y,R27
000362 93aa      	ST   -Y,R26
000363 9726      	SBIW R28,6
000364 940e 05f8 	CALL __SAVELOCR6
000366 e010      	LDI  R17,0
000367 85ac      	LDD  R26,Y+12
000368 85bd      	LDD  R27,Y+12+1
000369 e0e0      	LDI  R30,LOW(0)
00036a e0f0      	LDI  R31,HIGH(0)
00036b 93ed      	ST   X+,R30
00036c 93fc      	ST   X,R31
                 _0x2020016:
00036d 89ea      	LDD  R30,Y+18
00036e 89fb      	LDD  R31,Y+18+1
00036f 9631      	ADIW R30,1
000370 8bea      	STD  Y+18,R30
000371 8bfb      	STD  Y+18+1,R31
000372 9731      	SBIW R30,1
000373 91e4      	LPM  R30,Z
000374 2f2e      	MOV  R18,R30
000375 30e0      	CPI  R30,0
000376 f409      	BRNE PC+2
000377 c115      	RJMP _0x2020018
000378 2fe1      	MOV  R30,R17
000379 30e0      	CPI  R30,0
00037a f439      	BRNE _0x202001C
00037b 3225      	CPI  R18,37
00037c f411      	BRNE _0x202001D
00037d e011      	LDI  R17,LOW(1)
00037e c002      	RJMP _0x202001E
                 _0x202001D:
00037f 940e 0560 	CALL SUBOPT_0x12
                 _0x202001E:
000381 c10a      	RJMP _0x202001B
                 _0x202001C:
000382 30e1      	CPI  R30,LOW(0x1)
000383 f4a9      	BRNE _0x202001F
000384 3225      	CPI  R18,37
000385 f419      	BRNE _0x2020020
000386 940e 0560 	CALL SUBOPT_0x12
000388 c102      	RJMP _0x20200CC
                 _0x2020020:
000389 e012      	LDI  R17,LOW(2)
00038a e040      	LDI  R20,LOW(0)
00038b e000      	LDI  R16,LOW(0)
00038c 322d      	CPI  R18,45
00038d f411      	BRNE _0x2020021
00038e e001      	LDI  R16,LOW(1)
00038f c0fc      	RJMP _0x202001B
                 _0x2020021:
000390 322b      	CPI  R18,43
000391 f411      	BRNE _0x2020022
000392 e24b      	LDI  R20,LOW(43)
000393 c0f8      	RJMP _0x202001B
                 _0x2020022:
000394 3220      	CPI  R18,32
000395 f411      	BRNE _0x2020023
000396 e240      	LDI  R20,LOW(32)
000397 c0f4      	RJMP _0x202001B
                 _0x2020023:
000398 c002      	RJMP _0x2020024
                 _0x202001F:
000399 30e2      	CPI  R30,LOW(0x2)
00039a f439      	BRNE _0x2020025
                 _0x2020024:
00039b e050      	LDI  R21,LOW(0)
00039c e013      	LDI  R17,LOW(3)
00039d 3320      	CPI  R18,48
00039e f411      	BRNE _0x2020026
00039f 6800      	ORI  R16,LOW(128)
0003a0 c0eb      	RJMP _0x202001B
                 _0x2020026:
0003a1 c003      	RJMP _0x2020027
                 _0x2020025:
0003a2 30e3      	CPI  R30,LOW(0x3)
0003a3 f009      	BREQ PC+2
0003a4 c0e7      	RJMP _0x202001B
                 _0x2020027:
0003a5 3320      	CPI  R18,48
0003a6 f010      	BRLO _0x202002A
0003a7 332a      	CPI  R18,58
0003a8 f008      	BRLO _0x202002B
                 _0x202002A:
0003a9 c007      	RJMP _0x2020029
                 _0x202002B:
0003aa e0aa      	LDI  R26,LOW(10)
0003ab 9f5a      	MUL  R21,R26
0003ac 2d50      	MOV  R21,R0
0003ad 2fe2      	MOV  R30,R18
0003ae 53e0      	SUBI R30,LOW(48)
0003af 0f5e      	ADD  R21,R30
0003b0 c0db      	RJMP _0x202001B
                 _0x2020029:
0003b1 2fe2      	MOV  R30,R18
0003b2 36e3      	CPI  R30,LOW(0x63)
0003b3 f449      	BRNE _0x202002F
0003b4 940e 0567 	CALL SUBOPT_0x13
0003b6 89e8      	LDD  R30,Y+16
0003b7 89f9      	LDD  R31,Y+16+1
0003b8 81a4      	LDD  R26,Z+4
0003b9 93aa      	ST   -Y,R26
0003ba 940e 056d 	CALL SUBOPT_0x14
0003bc c0ce      	RJMP _0x2020030
                 _0x202002F:
0003bd 37e3      	CPI  R30,LOW(0x73)
0003be f441      	BRNE _0x2020032
0003bf 940e 0567 	CALL SUBOPT_0x13
0003c1 940e 0573 	CALL SUBOPT_0x15
0003c3 940e 04c9 	CALL _strlen
0003c5 2f1e      	MOV  R17,R30
0003c6 c00a      	RJMP _0x2020033
                 _0x2020032:
0003c7 37e0      	CPI  R30,LOW(0x70)
0003c8 f461      	BRNE _0x2020035
0003c9 940e 0567 	CALL SUBOPT_0x13
0003cb 940e 0573 	CALL SUBOPT_0x15
0003cd 940e 04d5 	CALL _strlenf
0003cf 2f1e      	MOV  R17,R30
0003d0 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003d1 6002      	ORI  R16,LOW(2)
0003d2 770f      	ANDI R16,LOW(127)
0003d3 e030      	LDI  R19,LOW(0)
0003d4 c034      	RJMP _0x2020036
                 _0x2020035:
0003d5 36e4      	CPI  R30,LOW(0x64)
0003d6 f011      	BREQ _0x2020039
0003d7 36e9      	CPI  R30,LOW(0x69)
0003d8 f411      	BRNE _0x202003A
                 _0x2020039:
0003d9 6004      	ORI  R16,LOW(4)
0003da c002      	RJMP _0x202003B
                 _0x202003A:
0003db 37e5      	CPI  R30,LOW(0x75)
0003dc f431      	BRNE _0x202003C
                 _0x202003B:
0003dd e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003de e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003df 83ee      	STD  Y+6,R30
0003e0 83ff      	STD  Y+6+1,R31
0003e1 e015      	LDI  R17,LOW(5)
0003e2 c00c      	RJMP _0x202003D
                 _0x202003C:
0003e3 35e8      	CPI  R30,LOW(0x58)
0003e4 f411      	BRNE _0x202003F
0003e5 6008      	ORI  R16,LOW(8)
0003e6 c003      	RJMP _0x2020040
                 _0x202003F:
0003e7 37e8      	CPI  R30,LOW(0x78)
0003e8 f009      	BREQ PC+2
0003e9 c0a1      	RJMP _0x2020071
                 _0x2020040:
0003ea e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0003eb e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003ec 83ee      	STD  Y+6,R30
0003ed 83ff      	STD  Y+6+1,R31
0003ee e014      	LDI  R17,LOW(4)
                 _0x202003D:
0003ef ff02      	SBRS R16,2
0003f0 c014      	RJMP _0x2020042
0003f1 940e 0567 	CALL SUBOPT_0x13
0003f3 940e 057d 	CALL SUBOPT_0x16
0003f5 85ab      	LDD  R26,Y+11
0003f6 23aa      	TST  R26
0003f7 f43a      	BRPL _0x2020043
0003f8 85ea      	LDD  R30,Y+10
0003f9 85fb      	LDD  R31,Y+10+1
0003fa 940e 059a 	CALL __ANEGW1
0003fc 87ea      	STD  Y+10,R30
0003fd 87fb      	STD  Y+10+1,R31
0003fe e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0003ff 3040      	CPI  R20,0
000400 f011      	BREQ _0x2020044
000401 5f1f      	SUBI R17,-LOW(1)
000402 c001      	RJMP _0x2020045
                 _0x2020044:
000403 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000404 c004      	RJMP _0x2020046
                 _0x2020042:
000405 940e 0567 	CALL SUBOPT_0x13
000407 940e 057d 	CALL SUBOPT_0x16
                 _0x2020046:
                 _0x2020036:
000409 fd00      	SBRC R16,0
00040a c011      	RJMP _0x2020047
                 _0x2020048:
00040b 1715      	CP   R17,R21
00040c f478      	BRSH _0x202004A
00040d ff07      	SBRS R16,7
00040e c008      	RJMP _0x202004B
00040f ff02      	SBRS R16,2
000410 c004      	RJMP _0x202004C
000411 7f0b      	ANDI R16,LOW(251)
000412 2f24      	MOV  R18,R20
000413 5011      	SUBI R17,LOW(1)
000414 c001      	RJMP _0x202004D
                 _0x202004C:
000415 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000416 c001      	RJMP _0x202004E
                 _0x202004B:
000417 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000418 940e 0560 	CALL SUBOPT_0x12
00041a 5051      	SUBI R21,LOW(1)
00041b cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00041c 2f31      	MOV  R19,R17
00041d ff01      	SBRS R16,1
00041e c017      	RJMP _0x202004F
                 _0x2020050:
00041f 3030      	CPI  R19,0
000420 f0a1      	BREQ _0x2020052
000421 ff03      	SBRS R16,3
000422 c006      	RJMP _0x2020053
000423 81ee      	LDD  R30,Y+6
000424 81ff      	LDD  R31,Y+6+1
000425 9125      	LPM  R18,Z+
000426 83ee      	STD  Y+6,R30
000427 83ff      	STD  Y+6+1,R31
000428 c005      	RJMP _0x2020054
                 _0x2020053:
000429 81ae      	LDD  R26,Y+6
00042a 81bf      	LDD  R27,Y+6+1
00042b 912d      	LD   R18,X+
00042c 83ae      	STD  Y+6,R26
00042d 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00042e 940e 0560 	CALL SUBOPT_0x12
000430 3050      	CPI  R21,0
000431 f009      	BREQ _0x2020055
000432 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000433 5031      	SUBI R19,LOW(1)
000434 cfea      	RJMP _0x2020050
                 _0x2020052:
000435 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000436 e320      	LDI  R18,LOW(48)
000437 81ee      	LDD  R30,Y+6
000438 81ff      	LDD  R31,Y+6+1
000439 940e 05d2 	CALL __GETW1PF
00043b 87e8      	STD  Y+8,R30
00043c 87f9      	STD  Y+8+1,R31
00043d 81ee      	LDD  R30,Y+6
00043e 81ff      	LDD  R31,Y+6+1
00043f 9632      	ADIW R30,2
000440 83ee      	STD  Y+6,R30
000441 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000442 85e8      	LDD  R30,Y+8
000443 85f9      	LDD  R31,Y+8+1
000444 85aa      	LDD  R26,Y+10
000445 85bb      	LDD  R27,Y+10+1
000446 17ae      	CP   R26,R30
000447 07bf      	CPC  R27,R31
000448 f050      	BRLO _0x202005C
000449 5f2f      	SUBI R18,-LOW(1)
00044a 85a8      	LDD  R26,Y+8
00044b 85b9      	LDD  R27,Y+8+1
00044c 85ea      	LDD  R30,Y+10
00044d 85fb      	LDD  R31,Y+10+1
00044e 1bea      	SUB  R30,R26
00044f 0bfb      	SBC  R31,R27
000450 87ea      	STD  Y+10,R30
000451 87fb      	STD  Y+10+1,R31
000452 cfef      	RJMP _0x202005A
                 _0x202005C:
000453 332a      	CPI  R18,58
000454 f028      	BRLO _0x202005D
000455 ff03      	SBRS R16,3
000456 c002      	RJMP _0x202005E
000457 5f29      	SUBI R18,-LOW(7)
000458 c001      	RJMP _0x202005F
                 _0x202005E:
000459 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00045a fd04      	SBRC R16,4
00045b c01a      	RJMP _0x2020061
00045c 3321      	CPI  R18,49
00045d f420      	BRSH _0x2020063
00045e 85a8      	LDD  R26,Y+8
00045f 85b9      	LDD  R27,Y+8+1
000460 9711      	SBIW R26,1
000461 f409      	BRNE _0x2020062
                 _0x2020063:
000462 c009      	RJMP _0x20200CD
                 _0x2020062:
000463 1753      	CP   R21,R19
000464 f010      	BRLO _0x2020067
000465 ff00      	SBRS R16,0
000466 c001      	RJMP _0x2020068
                 _0x2020067:
000467 c013      	RJMP _0x2020066
                 _0x2020068:
000468 e220      	LDI  R18,LOW(32)
000469 ff07      	SBRS R16,7
00046a c00b      	RJMP _0x2020069
00046b e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00046c 6100      	ORI  R16,LOW(16)
00046d ff02      	SBRS R16,2
00046e c007      	RJMP _0x202006A
00046f 7f0b      	ANDI R16,LOW(251)
000470 934a      	ST   -Y,R20
000471 940e 056d 	CALL SUBOPT_0x14
000473 3050      	CPI  R21,0
000474 f009      	BREQ _0x202006B
000475 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000476 940e 0560 	CALL SUBOPT_0x12
000478 3050      	CPI  R21,0
000479 f009      	BREQ _0x202006C
00047a 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00047b 5031      	SUBI R19,LOW(1)
00047c 85a8      	LDD  R26,Y+8
00047d 85b9      	LDD  R27,Y+8+1
00047e 9712      	SBIW R26,2
00047f f008      	BRLO _0x2020059
000480 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000481 ff00      	SBRS R16,0
000482 c008      	RJMP _0x202006D
                 _0x202006E:
000483 3050      	CPI  R21,0
000484 f031      	BREQ _0x2020070
000485 5051      	SUBI R21,LOW(1)
000486 e2e0      	LDI  R30,LOW(32)
000487 93ea      	ST   -Y,R30
000488 940e 056d 	CALL SUBOPT_0x14
00048a cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00048b e010      	LDI  R17,LOW(0)
                 _0x202001B:
00048c cee0      	RJMP _0x2020016
                 _0x2020018:
00048d 85ac      	LDD  R26,Y+12
00048e 85bd      	LDD  R27,Y+12+1
00048f 940e 05ce 	CALL __GETW1P
000491 940e 05ff 	CALL __LOADLOCR6
000493 9664      	ADIW R28,20
000494 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000495 92ff      	PUSH R15
000496 2ef8      	MOV  R15,R24
000497 9726      	SBIW R28,6
000498 940e 05fa 	CALL __SAVELOCR4
00049a 940e 0585 	CALL SUBOPT_0x17
00049c 9730      	SBIW R30,0
00049d f419      	BRNE _0x2020072
00049e efef      	LDI  R30,LOW(65535)
00049f efff      	LDI  R31,HIGH(65535)
0004a0 c023      	RJMP _0x20A0001
                 _0x2020072:
0004a1 01de      	MOVW R26,R28
0004a2 9616      	ADIW R26,6
0004a3 940e 0596 	CALL __ADDW2R15
0004a5 018d      	MOVW R16,R26
0004a6 940e 0585 	CALL SUBOPT_0x17
0004a8 83ee      	STD  Y+6,R30
0004a9 83ff      	STD  Y+6+1,R31
0004aa e0e0      	LDI  R30,LOW(0)
0004ab 87e8      	STD  Y+8,R30
0004ac 87e9      	STD  Y+8+1,R30
0004ad 01de      	MOVW R26,R28
0004ae 961a      	ADIW R26,10
0004af 940e 0596 	CALL __ADDW2R15
0004b1 940e 05ce 	CALL __GETW1P
0004b3 93fa      	ST   -Y,R31
0004b4 93ea      	ST   -Y,R30
0004b5 931a      	ST   -Y,R17
0004b6 930a      	ST   -Y,R16
0004b7 e2e1      	LDI  R30,LOW(_put_buff_G101)
0004b8 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004b9 93fa      	ST   -Y,R31
0004ba 93ea      	ST   -Y,R30
0004bb 01de      	MOVW R26,R28
0004bc 961a      	ADIW R26,10
0004bd dea3      	RCALL __print_G101
0004be 019f      	MOVW R18,R30
0004bf 81ae      	LDD  R26,Y+6
0004c0 81bf      	LDD  R27,Y+6+1
0004c1 e0e0      	LDI  R30,LOW(0)
0004c2 93ec      	ST   X,R30
0004c3 01f9      	MOVW R30,R18
                 _0x20A0001:
0004c4 940e 0601 	CALL __LOADLOCR4
0004c6 962a      	ADIW R28,10
0004c7 90ff      	POP  R15
0004c8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004c9 93ba      	ST   -Y,R27
0004ca 93aa      	ST   -Y,R26
0004cb 91a9          ld   r26,y+
0004cc 91b9          ld   r27,y+
0004cd 27ee          clr  r30
0004ce 27ff          clr  r31
                 strlen0:
0004cf 916d          ld   r22,x+
0004d0 2366          tst  r22
0004d1 f011          breq strlen1
0004d2 9631          adiw r30,1
0004d3 cffb          rjmp strlen0
                 strlen1:
0004d4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004d5 93ba      	ST   -Y,R27
0004d6 93aa      	ST   -Y,R26
0004d7 27aa          clr  r26
0004d8 27bb          clr  r27
0004d9 91e9          ld   r30,y+
0004da 91f9          ld   r31,y+
                 strlenf0:
0004db 9005      	lpm  r0,z+
0004dc 2000          tst  r0
0004dd f011          breq strlenf1
0004de 9611          adiw r26,1
0004df cffb          rjmp strlenf0
                 strlenf1:
0004e0 01fd          movw r30,r26
0004e1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _scan:
000298           	.BYTE 0x4
                 _Buf:
00029c           	.BYTE 0x10
                 _shown:
0002ac           	.BYTE 0x2
                 _showHistoryState:
0002ae           	.BYTE 0x2
                 _arrkey:
0002b0           	.BYTE 0x10
                 __base_y_G100:
0002c0           	.BYTE 0x4
                 __lcd_x:
0002c4           	.BYTE 0x1
                 __lcd_y:
0002c5           	.BYTE 0x1
                 __lcd_maxx:
0002c6           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0004e2 9722      	SBIW R28,2
0004e3 e0a0      	LDI  R26,LOW(0)
0004e4 e0b0      	LDI  R27,HIGH(0)
0004e5 940e 05db 	CALL __EEPROMRDB
0004e7 e0f0      	LDI  R31,0
0004e8 83e8      	ST   Y,R30
0004e9 83f9      	STD  Y+1,R31
0004ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0004eb 91a0 02ae 	LDS  R26,_showHistoryState
0004ed 91b0 02af 	LDS  R27,_showHistoryState+1
0004ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0004f0 91e0 02ac 	LDS  R30,_shown
0004f2 91f0 02ad 	LDS  R31,_shown+1
0004f4 940e 059e 	CALL __LSLW2
0004f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0004f7 01df      	MOVW R26,R30
0004f8 940e 05db 	CALL __EEPROMRDB
0004fa e0f0      	LDI  R31,0
0004fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0004fc e9ec      	LDI  R30,LOW(_Buf)
0004fd e0f2      	LDI  R31,HIGH(_Buf)
0004fe 93fa      	ST   -Y,R31
0004ff 93ea      	ST   -Y,R30
000500 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
000501 e9ed     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000502 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000503 93fa      	ST   -Y,R31
000504 93ea      	ST   -Y,R30
000505 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000506 940e 05a3 	CALL __CWD1
000508 940e 05d6 	CALL __PUTPARD1
00050a e084      	LDI  R24,4
00050b 940e 0495 	CALL _sprintf
00050d 9628      	ADIW R28,8
00050e e9ac      	LDI  R26,LOW(_Buf)
00050f e0b2      	LDI  R27,HIGH(_Buf)
000510 940e 02e2 	CALL _lcd_puts
000512 cfe9      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000513 940e 05d6 	CALL __PUTPARD1
000515 e084      	LDI  R24,4
000516 940e 0495 	CALL _sprintf
000518 9628      	ADIW R28,8
000519 e9ac      	LDI  R26,LOW(_Buf)
00051a e0b2      	LDI  R27,HIGH(_Buf)
00051b 940e 02e2 	CALL _lcd_puts
00051d cfde      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00051e 940e 05a3 	CALL __CWD1
000520 940e 05d6 	CALL __PUTPARD1
000522 e084      	LDI  R24,4
000523 940e 0495 	CALL _sprintf
000525 9628      	ADIW R28,8
000526 e9ac      	LDI  R26,LOW(_Buf)
000527 e0b2      	LDI  R27,HIGH(_Buf)
000528 940c 02e2 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
00052a dfc0      	RCALL SUBOPT_0x1
00052b e0e0      	LDI  R30,LOW(0)
00052c e0f0      	LDI  R31,HIGH(0)
00052d 940e 05ad 	CALL __EQW12
00052f 21e0      	AND  R30,R0
000530 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
000531 85a8      	LDD  R26,Y+8
000532 85b9      	LDD  R27,Y+8+1
000533 9611      	ADIW R26,1
000534 e0e4      	LDI  R30,LOW(4)
000535 e0f0      	LDI  R31,HIGH(4)
000536 940e 05bb 	CALL __MULW12
000538 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000539 85e8      	LDD  R30,Y+8
00053a 85f9      	LDD  R31,Y+8+1
00053b 940e 059e 	CALL __LSLW2
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00053e 940e 05e7 	CALL __EEPROMWRB
000540 cff8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000541 81e8      	LD   R30,Y
000542 81f9      	LDD  R31,Y+1
000543 940e 059e 	CALL __LSLW2
000545 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000546 940e 05e7 	CALL __EEPROMWRB
000548 cff8      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
000549 e0aa      	LDI  R26,LOW(10)
00054a e0b0      	LDI  R27,HIGH(10)
00054b 940e 05bb 	CALL __MULW12
00054d 01df      	MOVW R26,R30
00054e 27ee      	CLR  R30
00054f 0da5      	ADD  R26,R5
000550 1fbe      	ADC  R27,R30
000551 97d0      	SBIW R26,48
000552 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000553 940e 0297 	CALL __lcd_write_data
000555 e0a3      	LDI  R26,LOW(3)
000556 e0b0      	LDI  R27,0
000557 940c 058c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000559 e3a0      	LDI  R26,LOW(48)
00055a 940e 0283 	CALL __lcd_write_nibble_G100
                +
00055c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00055d 958a     +DEC R24
00055e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00055f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
000560 932a      	ST   -Y,R18
000561 85ad      	LDD  R26,Y+13
000562 85be      	LDD  R27,Y+13+1
000563 85ef      	LDD  R30,Y+15
000564 89f8      	LDD  R31,Y+15+1
000565 9509      	ICALL
000566 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
000567 89e8      	LDD  R30,Y+16
000568 89f9      	LDD  R31,Y+16+1
000569 9734      	SBIW R30,4
00056a 8be8      	STD  Y+16,R30
00056b 8bf9      	STD  Y+16+1,R31
00056c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
00056d 85ad      	LDD  R26,Y+13
00056e 85be      	LDD  R27,Y+13+1
00056f 85ef      	LDD  R30,Y+15
000570 89f8      	LDD  R31,Y+15+1
000571 9509      	ICALL
000572 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
000573 89a8      	LDD  R26,Y+16
000574 89b9      	LDD  R27,Y+16+1
000575 9614      	ADIW R26,4
000576 940e 05ce 	CALL __GETW1P
000578 83ee      	STD  Y+6,R30
000579 83ff      	STD  Y+6+1,R31
00057a 81ae      	LDD  R26,Y+6
00057b 81bf      	LDD  R27,Y+6+1
00057c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
00057d 89a8      	LDD  R26,Y+16
00057e 89b9      	LDD  R27,Y+16+1
00057f 9614      	ADIW R26,4
000580 940e 05ce 	CALL __GETW1P
000582 87ea      	STD  Y+10,R30
000583 87fb      	STD  Y+10+1,R31
000584 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000585 01de      	MOVW R26,R28
000586 961c      	ADIW R26,12
000587 940e 0596 	CALL __ADDW2R15
000589 940e 05ce 	CALL __GETW1P
00058b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00058c 9610      	adiw r26,0
00058d f039      	breq __delay_ms1
                 __delay_ms0:
00058e 95a8      	wdr
                +
00058f ef8a     +LDI R24 , LOW ( 0xFA )
000590 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000591 9701     +SBIW R24 , 1
000592 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000593 9711      	sbiw r26,1
000594 f7c9      	brne __delay_ms0
                 __delay_ms1:
000595 9508      	ret
                 
                 __ADDW2R15:
000596 2400      	CLR  R0
000597 0daf      	ADD  R26,R15
000598 1db0      	ADC  R27,R0
000599 9508      	RET
                 
                 __ANEGW1:
00059a 95f1      	NEG  R31
00059b 95e1      	NEG  R30
00059c 40f0      	SBCI R31,0
00059d 9508      	RET
                 
                 __LSLW2:
00059e 0fee      	LSL  R30
00059f 1fff      	ROL  R31
0005a0 0fee      	LSL  R30
0005a1 1fff      	ROL  R31
0005a2 9508      	RET
                 
                 __CWD1:
0005a3 2f6f      	MOV  R22,R31
0005a4 0f66      	ADD  R22,R22
0005a5 0b66      	SBC  R22,R22
0005a6 2f76      	MOV  R23,R22
0005a7 9508      	RET
                 
                 __EQB12:
0005a8 17ea      	CP   R30,R26
0005a9 e0e1      	LDI  R30,1
0005aa f009      	BREQ __EQB12T
0005ab 27ee      	CLR  R30
                 __EQB12T:
0005ac 9508      	RET
                 
                 __EQW12:
0005ad 17ea      	CP   R30,R26
0005ae 07fb      	CPC  R31,R27
0005af e0e1      	LDI  R30,1
0005b0 f009      	BREQ __EQW12T
0005b1 27ee      	CLR  R30
                 __EQW12T:
0005b2 9508      	RET
                 
                 __MULW12U:
0005b3 9ffa      	MUL  R31,R26
0005b4 2df0      	MOV  R31,R0
0005b5 9feb      	MUL  R30,R27
0005b6 0df0      	ADD  R31,R0
0005b7 9fea      	MUL  R30,R26
0005b8 2de0      	MOV  R30,R0
0005b9 0df1      	ADD  R31,R1
0005ba 9508      	RET
                 
                 __MULW12:
0005bb d004      	RCALL __CHKSIGNW
0005bc dff6      	RCALL __MULW12U
0005bd f40e      	BRTC __MULW121
0005be dfdb      	RCALL __ANEGW1
                 __MULW121:
0005bf 9508      	RET
                 
                 __CHKSIGNW:
0005c0 94e8      	CLT
0005c1 fff7      	SBRS R31,7
0005c2 c002      	RJMP __CHKSW1
0005c3 dfd6      	RCALL __ANEGW1
0005c4 9468      	SET
                 __CHKSW1:
0005c5 ffb7      	SBRS R27,7
0005c6 c006      	RJMP __CHKSW2
0005c7 95a0      	COM  R26
0005c8 95b0      	COM  R27
0005c9 9611      	ADIW R26,1
0005ca f800      	BLD  R0,0
0005cb 9403      	INC  R0
0005cc fa00      	BST  R0,0
                 __CHKSW2:
0005cd 9508      	RET
                 
                 __GETW1P:
0005ce 91ed      	LD   R30,X+
0005cf 91fc      	LD   R31,X
0005d0 9711      	SBIW R26,1
0005d1 9508      	RET
                 
                 __GETW1PF:
0005d2 9005      	LPM  R0,Z+
0005d3 91f4      	LPM  R31,Z
0005d4 2de0      	MOV  R30,R0
0005d5 9508      	RET
                 
                 __PUTPARD1:
0005d6 937a      	ST   -Y,R23
0005d7 936a      	ST   -Y,R22
0005d8 93fa      	ST   -Y,R31
0005d9 93ea      	ST   -Y,R30
0005da 9508      	RET
                 
                 __EEPROMRDB:
0005db 99e1      	SBIC EECR,EEWE
0005dc cffe      	RJMP __EEPROMRDB
0005dd 93ff      	PUSH R31
0005de b7ff      	IN   R31,SREG
0005df 94f8      	CLI
0005e0 bbae      	OUT  EEARL,R26
0005e1 bbbf      	OUT  EEARH,R27
0005e2 9ae0      	SBI  EECR,EERE
0005e3 b3ed      	IN   R30,EEDR
0005e4 bfff      	OUT  SREG,R31
0005e5 91ff      	POP  R31
0005e6 9508      	RET
                 
                 __EEPROMWRB:
0005e7 9be1      	SBIS EECR,EEWE
0005e8 c002      	RJMP __EEPROMWRB1
0005e9 95a8      	WDR
0005ea cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0005eb b79f      	IN   R25,SREG
0005ec 94f8      	CLI
0005ed bbae      	OUT  EEARL,R26
0005ee bbbf      	OUT  EEARH,R27
0005ef 9ae0      	SBI  EECR,EERE
0005f0 b38d      	IN   R24,EEDR
0005f1 17e8      	CP   R30,R24
0005f2 f019      	BREQ __EEPROMWRB0
0005f3 bbed      	OUT  EEDR,R30
0005f4 9ae2      	SBI  EECR,EEMWE
0005f5 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0005f6 bf9f      	OUT  SREG,R25
0005f7 9508      	RET
                 
                 __SAVELOCR6:
0005f8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005f9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005fa 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005fb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005fc 931a      	ST   -Y,R17
0005fd 930a      	ST   -Y,R16
0005fe 9508      	RET
                 
                 __LOADLOCR6:
0005ff 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000600 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000601 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000602 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000603 8119      	LDD  R17,Y+1
000604 8108      	LD   R16,Y
000605 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :   4 r2 :   0 r3 :   0 r4 :   4 r5 :  15 r6 :   7 r7 :   3 
r8 :   7 r9 :   3 r10:   4 r11:   1 r12:   4 r13:   3 r14:   0 r15:   6 
r16:  37 r17:  34 r18:  29 r19:   8 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  33 r25:   7 r26: 154 r27:  66 r28:  27 r29:   1 r30: 324 r31: 116 
x  :  23 y  : 247 z  :  20 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :  52 and   :   1 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  25 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   2 brmi  :   1 brne  :  40 brpl  :   1 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 126 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :  28 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  13 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   1 jmp   :  24 ld    :  51 ldd   :  95 ldi   : 158 
lds   :  12 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  31 movw  :  38 
mul   :   8 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   9 out   :  23 pop   :   2 push  :   2 rcall :  28 ret   :  45 
reti  :   1 rjmp  :  91 rol   :   2 ror   :   0 sbc   :   3 sbci  :   7 
sbi   :   9 sbic  :   5 sbis  :   1 sbiw  :  29 sbr   :   0 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  81 std   :  51 sts   :  19 sub   :   2 subi  :  25 swap  :   1 
tst   :   5 wdr   :   2 
Instructions used: 67 out of 116 (57.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c0c   2936    148   3084   32768   9.4%
[.dseg] 0x000060 0x0002c7      0    103    103    2048   5.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
